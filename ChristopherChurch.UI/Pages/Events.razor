@page "/Events"
@inject IEventsData _db
<!--#TODO Create User Validation-->
<!--#TODO Create Unique Event Name Validation-->
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="eventpage">
                <h2 class="text-center">Events</h2>
            </div>
        </div>
    </div>
    <div class="row">
        @if (events != null && events.Any())
        {
            @foreach (var eventModel in events)
            {
                <div class="col-md-6">
                    <div class="eventpage">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@eventModel.EventName</h5>
                                <p class="card-text">@eventModel.Description</p>
                                <p class="card-text">Event Date: @eventModel.EventDate.ToShortDateString()</p>
                                <div class="container">
                                    <div class="row">
                                        <div class="col-12">
                                            <button class="btn btn-outline-primary rounded" @onclick="() => NavigateToEditEvent(eventModel)">Edit</button>
                                            <button class="btn btn-outline-danger rounded" @onclick="() => NavigateToDeleteEvent(eventModel)">Delete</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-md-12 eventpage">
                <p>No current events available.</p>
                <button class="btn btn-outline-primary rounded" @onclick="NavigateToCreateEvent">Create Event</button>
            </div>
        }
    </div>
</div>


@code {
    private List<EventModel>? events;
    private bool showCreateForm = false;
    public bool showEditForm = false;
    private bool showSuccess = false;


    [Inject] private NavigationManager? NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();

    }
    private async Task LoadEvents()
    {
        try
        {
            events = (await _db.GetAllEvents()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading events: {ex.Message}");
        }
    }

    private void NavigateToEditEvent(EventModel eventModel)
    {
        if (eventModel != null)
        {
            NavigationManager!.NavigateTo($"/Events/Edit/{eventModel.EventName}");
        }
        else
        {
            Console.WriteLine($"Error: Event not found for EventName: {eventModel!.EventName}");
        }
    }
    private void NavigateToDeleteEvent(EventModel eventModel)
    {
        if (eventModel != null)
        {
            NavigationManager!.NavigateTo($"/Events/Delete/{eventModel.EventName}");
        }
        else
        {
            Console.WriteLine($"Error: Event not found for EventName: {eventModel!.EventName}");
        }
    }
    private void NavigateToCreateEvent()
    {
        NavigationManager!.NavigateTo("/Events/Create");
    }
}

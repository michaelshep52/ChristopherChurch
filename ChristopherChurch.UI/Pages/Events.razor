@page "/Events"
@inject IEventsData _db

<!--#TODO Create User Validation-->
<!--#TODO Create Unique Event Name Validation-->

@if (IsOnEventsPage)
{
    <div class="eventpage">
        <h2 class="text-center">Events</h2>

        @if (events != null && events.Any())
        {
            <div class="row">
                @foreach (var eventModel in events)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@eventModel.EventName</h5>
                                <p class="card-text">@eventModel.Description</p>
                                <p class="card-text">Event Date: @eventModel.EventDate.ToShortDateString()</p>
                                <div class="container">
                                    <div class="row">
                                        <div class="col-12">
                                            <button class="btn btn-outline-primary rounded" @onclick="ToggleCreateForm">Create New Event</button>
                                            <button class="btn btn-outline-primary rounded" @onclick="() => EditEvent(eventModel)">Edit</button>
                                        </div>
                                        <div class="col-12 mt-2">
                                            <button class="btn btn-outline-danger rounded" @onclick="() => DeleteEvent(eventModel.EventName)">Delete</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    }
                </div>
                }
                else
                {
                <div class="container mb-3">
                    <p>No current events available.</p>
                    <button class="btn btn-outline-primary rounded" @onclick="ToggleCreateForm">Create New Event</button>
                </div>
                }
                @if (showEditForm)
                {
                    <div>
                        @if (showSuccess)
                        {
                            <div class="alert alert-success" role="alert">
                                Event Edited successfully!
                            </div>
                        }
                        else
                        {
                            <h3>Edit Event</h3>

                            <EditForm Model="@editEvent" OnValidSubmit="@UpdateEvent">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="form-group">
                                    <label for="eventName">Event Name:</label>
                                    <InputText id="eventName" @bind-Value="editEvent.EventName" class="form-control" disabled />
                                </div>

                                <div class="form-group">
                                    <label for="description">Description:</label>
                                    <InputTextArea id="description" @bind-Value="editEvent.Description" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="eventDate">Event Date:</label>
                                    <InputDate id="eventDate" @bind-Value="editEvent.EventDate" class="form-control" />
                                </div>

                                <button type="submit" class="btn btn-outline-primary mt-3">Save Event</button>
                            </EditForm>
                        }
                    </div>
                }

                @if (showCreateForm)
                {
                    <div>
                        @if (showSuccess)
                        {
                            <div class="alert alert-success" role="alert">
                                Event created successfully!
                            </div>
                        }
                        else
                        {
                            <h3>Create New Event</h3>

                            <EditForm Model="@newEvent" OnValidSubmit="@CreateEvent">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="form-group">
                                    <label for="eventName">Event Name:</label>
                                    <InputText id="eventName" @bind-Value="newEvent.EventName" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="description">Description:</label>
                                    <InputTextArea id="description" @bind-Value="newEvent.Description" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="eventDate">Event Date:</label>
                                    <InputDate id="eventDate" @bind-Value="newEvent.EventDate" class="form-control" />
                                </div>

                                <div class="container">
                                    <div class="row">
                                        <div class="col-12 mt-3">
                                            <button type="submit" class="btn btn-outline-primary">Save Event</button>
                                            <button class="btn btn-outline-primary rounded me-3" @onclick="ToggleCreateForm">Cancel</button>
                                        </div>
                                    </div>
                                </div>

                            </EditForm>
                        }
                    </div>
                }
            </div>
}

@if (!IsOnEventsPage)
{
    <div class="eventpage">
        <h2 class="text-center">Upcoming Event</h2>

        @if (events != null && events.Any())
            {
                var upcomingEvent = events.OrderBy(e => e.EventDate).First(); 

                <div class="card-deck">
                        <div class="card mb-3">
                            <div class="card-body">
                                <h5 class="card-title">@upcomingEvent.EventName</h5>
                                <p class="card-text">@upcomingEvent.Description</p>
                                <p class="card-text">Event Date: @upcomingEvent.EventDate.ToShortDateString()</p>
                                <div class="container">
                                    <div class="row">
                                        <div class="col-12">
                                            <button class="btn btn-outline-primary rounded" @onclick="ToggleCreateForm">Create New Event</button>
                                            <button class="btn btn-outline-primary rounded" @onclick="() => EditEvent(upcomingEvent)">Edit</button>
                                        </div>
                                        <div class="col-12 mt-2">
                                            <button class="btn btn-outline-danger rounded" @onclick="() => DeleteEvent(upcomingEvent.EventName)">Delete</button>
                                            <button class="btn btn-outline-success rounded" @onclick="ViewAllEvents">View All Events</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                </div>
             }
        else
        {
            <div class="container mb-3">
                <p>No current events available.</p>
                <button class="btn btn-outline-primary rounded" @onclick="ToggleCreateForm">Create New Event</button>
            </div>
        }

        @if (showEditForm)
        {
            <div>
                @if (showSuccess)
                {
                    <div class="alert alert-success" role="alert">
                        Event Edited successfully!
                    </div>
                }
                else
                {
                    <h3>Edit Event</h3>

                    <EditForm Model="@editEvent" OnValidSubmit="@UpdateEvent">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="eventName">Event Name:</label>
                            <InputText id="eventName" @bind-Value="editEvent.EventName" class="form-control" disabled />
                        </div>

                        <div class="form-group">
                            <label for="description">Description:</label>
                            <InputTextArea id="description" @bind-Value="editEvent.Description" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="eventDate">Event Date:</label>
                            <InputDate id="eventDate" @bind-Value="editEvent.EventDate" class="form-control" />
                        </div>
                        <div class="container">
                            <div class="row">
                                <div class="col-12 mt-3">
                                    <button type="submit" class="btn btn-outline-primary">Save Event</button>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        }

        @if (showCreateForm)
        {
            <div>
                @if (showSuccess)
                {
                    <div class="alert alert-success" role="alert">
                        Event created successfully!
                    </div>
                }
                else
                {
                    <h3>Create New Event</h3>

                    <EditForm Model="@newEvent" OnValidSubmit="@CreateEvent">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="eventName">Event Name:</label>
                            <InputText id="eventName" @bind-Value="newEvent.EventName" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="description">Description:</label>
                            <InputTextArea id="description" @bind-Value="newEvent.Description" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="eventDate">Event Date:</label>
                            <InputDate id="eventDate" @bind-Value="newEvent.EventDate" class="form-control" />
                        </div>
                        <div class="container">
                            <div class="row">
                                <div class="col-12 mt-3">
                                    <button type="submit" class="btn btn-primary">Save Event</button>
                                    <button class="btn btn-outline-primary rounded me-3" @onclick="ToggleCreateForm">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        }
    </div>
}

@code {
    private List<EventModel> events;
    private EventModel editEvent;
    private DisplayEventModel newEvent = new DisplayEventModel();
    private bool showCreateForm = false;
    public bool showEditForm = false;
    private bool showSuccess = false;
    private bool IsOnEventsPage => NavigationManager.Uri.Contains("/events");

    [Inject] private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }
    private async Task LoadEvents()
    {
        try
        {
            events = (await _db.GetAllEvents()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading events: {ex.Message}");
        }
    }

    private async void EditEvent(EventModel selectedEvent)
    {
        try
        {
            editEvent = await _db.GetEventByName(selectedEvent.EventName);

            showEditForm = true;
            showSuccess = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading event for edit: {ex.Message}");
        }
    }

    private async Task UpdateEvent()
    {
        try
        {
            await _db.UpdateEvent(editEvent);
            await LoadEvents();

            showSuccess = true;
            showEditForm = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating event: {ex.Message}");
        }
    }


    private async void DeleteEvent(string eventName)
    {
        try
        {
            await _db.DeleteEvent(eventName);
            StateHasChanged();
            await LoadEvents();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting event: {ex.Message}");
        }
    }

    private void ToggleCreateForm()
    {
        showCreateForm = !showCreateForm;
        showSuccess = false;

        if (!showCreateForm)
        {
            newEvent = new DisplayEventModel();
        }
    }

    private async Task CreateEvent()
    {
        try
        {
            EventModel e = new EventModel
            {
                EventName = newEvent.EventName,
                Description = newEvent.Description,
                EventDate = newEvent.EventDate
            };
            await _db.AddEvent(e);
            events.Add(e);

            newEvent = new DisplayEventModel();

            showSuccess = true;


            ToggleCreateForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting event: {ex.Message}");
        }
    }

    private void ViewAllEvents()
    {
        NavigationManager.NavigateTo("/events");
    }
}

@page "/Events"
@inject IEventsData _db

<div class="eventpage">
    <h2 class="text-center">Upcoming Events</h2>

    <!-- Display existing events -->
    @if (events != null && events.Any())
    {
        <div class="card-deck">
            @foreach (var eventModel in events)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">@eventModel.EventName</h5>
                        <p class="card-text">@eventModel.Description</p>
                        <p class="card-text">Event Date: @eventModel.EventDate.ToShortDateString()</p>
                        <button class="btn btn-outline-primary rounded" @onclick="() => EditEvent(eventModel)">Edit</button>
                        <button class="btn btn-outline-danger rounded" @onclick="() => DeleteEvent(eventModel.EventId)">Delete</button>
                        <p>Event Id: @eventModel.EventId</p>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No events available.</p>
    }

    <!-- Display form to create a new event -->
    @if (showCreateForm)
    {
        <div>
            @if (showSuccess)
            {
                <div class="alert alert-success" role="alert">
                    Event created successfully!
                </div>
            }
            else
            {
                <h3>Create New Event</h3>

                <EditForm Model="@newEvent" OnValidSubmit="@CreateEvent">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="eventName">Event Name:</label>
                        <InputText id="eventName" @bind-Value="newEvent.EventName" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="description">Description:</label>
                        <InputTextArea id="description" @bind-Value="newEvent.Description" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="eventDate">Event Date:</label>
                        <InputDate id="eventDate" @bind-Value="newEvent.EventDate" class="form-control" />
                    </div>

                    <button type="submit" class="btn btn-primary">Save Event</button>
                </EditForm>
            }
        </div>
    }

    <!-- Toggle button to show/hide the create form -->
    <button class="btn btn-outline-primary rounded me-3" @onclick="ToggleCreateForm">Create New Event</button>

    <!-- View all events button -->
    @if (!IsOnEventsPage)
    {
        <button class="btn btn-outline-success rounded" @onclick="ViewAllEvents">View All Events</button>
    }
</div>

@code {
    private List<EventModel> events;
    private DisplayEventModel newEvent = new DisplayEventModel();
    private int nextEventId = 1;
    private bool showCreateForm = false;
    private bool showSuccess = false;
    private bool IsOnEventsPage => NavigationManager.Uri.Contains("/events");

    [Inject] private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        events = await _db.GetAllEvents();
    }

    private async void EditEvent(EventModel selectedEvent)
    {
        // Perform edit logic
        // You might want to navigate to another page or show a modal for editing
        // Example: NavigationManager.NavigateTo($"/editEvent/{selectedEvent.EventId}");
    }

    private async void DeleteEvent(int eventId)
    {
        try
        {
            await _db.DeleteEvent(eventId);
            await LoadEvents();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting event: {ex.Message}");
        }
    }

    private void ToggleCreateForm()
    {
        showCreateForm = !showCreateForm;
        showSuccess = false;

        if (!showCreateForm)
        {
            newEvent = new DisplayEventModel();
        }
    }

    private async Task CreateEvent()
    {
        try
        {
            EventModel e = new EventModel
            {
                EventId = nextEventId++,
                EventName = newEvent.EventName,
                Description = newEvent.Description,
                EventDate = newEvent.EventDate
            };
            await _db.AddEvent(e);
            events.Add(e);

            newEvent = new DisplayEventModel();

            showSuccess = true;

            await Task.Delay(3000);
            ToggleCreateForm();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting event: {ex.Message}");
        }
    }

    private void ViewAllEvents()
    {
        NavigationManager.NavigateTo("/events");
    }
}

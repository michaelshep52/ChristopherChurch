@page "/Events/Delete/{EventName}"
@inject IEventsData _db

<div class="eventpage">
    @if (deletionStage == DeletionStage.Confirmation)
    {
        <div class="container mb-3">
            <p>Are you sure you want to delete the event?</p>
            <button class="btn btn-outline-danger rounded" @onclick="EventDeletion">Yes, Delete</button>
            <button class="btn btn-outline-primary rounded" @onclick="CancelDelete">Cancel</button>
        </div>
    }
    else if (deletionStage == DeletionStage.Success)
    {
        <div class="container mb-3">
            <h4>Event Deleted successfully!</h4>
            <button class="btn btn-outline-primary rounded" @onclick="NavigateToEvents">Events</button>
            <button class="btn btn-outline-secondary rounded" @onclick="NavigateToHome">Back</button>
        </div>
    }
    else
    {
        <h3>Delete Event</h3>
        <p>Are you sure you want to delete event @deleteEvent?.EventName?</p>
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <button class="btn btn-outline-danger rounded" @onclick="ConfirmDelete">Delete</button>
                    <button class="btn btn-outline-primary rounded" @onclick="NavigateToHome">Back</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private EventModel? deleteEvent;
    private DeletionStage deletionStage = DeletionStage.Initial;

    private enum DeletionStage
    {
        Initial,
        Confirmation,
        Success
    }

    [Inject] private NavigationManager? NavigationManager { get; set; }

    [Parameter] public string? EventName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadEvent();
    }

    private async Task LoadEvent()
    {
        try
        {
            if (EventName != null)
            {
                // Load the specific event based on the EventName parameter
                deleteEvent = await _db.GetEventByName(EventName);

                if (deleteEvent == null)
                {
                    // Handle the case where the event is not found
                    Console.WriteLine($"Error: Event not found for EventName: {EventName}");
                }
            }
            else
            {
                // Handle the case where EventName is null
                Console.WriteLine("Error: EventName is null.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading event: {ex.Message}");
        }
    }

    private void ConfirmDelete()
    {
        deletionStage = DeletionStage.Confirmation;
    }

    private void CancelDelete()
    {
        deletionStage = DeletionStage.Initial;
    }

    private async Task EventDeletion()
    {
        try
        {
            if (deleteEvent != null)
            {
                await _db.DeleteEvent(deleteEvent.EventName);
                deletionStage = DeletionStage.Success;
            }
            else
            {
                Console.WriteLine($"Error: Event not found for EventName: {EventName}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting event: {ex.Message}");
        }
    }

    private void NavigateToEvents()
    {
        NavigationManager!.NavigateTo("/Events");
    }

    private void NavigateToHome()
    {
        NavigationManager!.NavigateTo("/");
    }
}

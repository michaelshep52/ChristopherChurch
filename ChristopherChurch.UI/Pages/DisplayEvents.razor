@page "/Events/Display"
@inject IJSRuntime JSRuntime
@inject IGoogleCalendarService GoogleCalendarService
@inject AuthenticationStateProvider AuthenticationStateProvider



<div class="eventpage">
    <h2 class="text-center">Events</h2>
    @if (calendarEvents != null && calendarEvents.Any())
    {
        var upcomingEvent = calendarEvents.OrderBy(e => e.StartDateTime).First();

        <div class="row mb-3">
            <div class="col">
                <div class="card border-dark">
                    <div class="card-body">
                        <h5 class="card-title">@upcomingEvent.Summary</h5>
                        <p class="card-text">@upcomingEvent.Description</p>
                        <p class="card-text">Start Event Date: @upcomingEvent.StartDateTime.ToShortDateString()</p>
                        <p class="card-text">End Event Date: @upcomingEvent.EndDateTime.ToShortDateString()</p>
                        <p class="card-text">@upcomingEvent.Location</p>
                        <div class="container">
                            <div class="row">
                                <div class="col-12 mt-2">
                                    <button class="btn btn-outline-primary rounded" @onclick="NavigateToAllEvents">All Events</button>
                                </div>
                                <div class="col-12 mt-2">
                                    <button class="btn btn-outline-primary rounded" @onclick="() => AddToGoogleCalendar(upcomingEvent)">Add to Google Calendar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {

    [Inject] private NavigationManager? NavigationManager { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string? googleUserToken;
    private bool hasCalledJsInterop = false;
    private List<EventModel>? calendarEvents;

    protected override async Task OnInitializedAsync()
    {
        await LoadGoogleCalendarEvents();
    }

    private async Task LoadGoogleCalendarEvents()
    {
        try
        {
            calendarEvents = await GoogleCalendarService.GetPublicEventsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Google Calendar events: {ex.Message}");
        }
    }

    private async Task AddToGoogleCalendar(EventModel eventModel)
    {
        try
        {
            var websiteEvent = new Google.Apis.Calendar.v3.Data.Event
            {
                Summary = eventModel.Summary,
                Description = eventModel.Description,
                Start = new Google.Apis.Calendar.v3.Data.EventDateTime { DateTimeDateTimeOffset = eventModel.StartDateTime, TimeZone = "UTC" },
                End = new Google.Apis.Calendar.v3.Data.EventDateTime { DateTimeDateTimeOffset = eventModel.EndDateTime, TimeZone = "UTC" },
                Location = eventModel.Location
            };

            // Gets authorization from the user
            var authResult = await JSRuntime.InvokeAsync<AuthResult>("authorizeGoogleCalendar");

            if (authResult.IsAuthorized)
            {
                var googleCalendarLink = GoogleCalendarService.GetEventAddToGoogleCalendarLink(websiteEvent);

                // Open the Google Calendar link in a new tab
                await JSRuntime.InvokeVoidAsync("open", googleCalendarLink, "_blank");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding event to Google Calendar: {ex.Message}");
        }
    }

    private void NavigateToAllEvents()
    {
        NavigationManager!.NavigateTo("/Events");
    }

    }

@page "/Events/Display"
@inject IEventsData _db

<div class="eventpage">
    <h2 class="text-center">Events</h2>

    @if (events != null && events.Any())
    {
        <div class="row">
            @if (events != null && events.Any())
            {
                var upcomingEvent = events.OrderBy(e => e.EventDate).First();

                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@upcomingEvent.EventName</h5>
                            <p class="card-text">@upcomingEvent.Description</p>
                            <p class="card-text">Event Date: @upcomingEvent.EventDate.ToShortDateString()</p>
                            <div class="container">
                                <div class="row">
                                    <div class="col-12">
                                        <button class="btn btn-outline-primary rounded" @onclick="NavigateToEditEvent">Edit</button>
                                        <button class="btn btn-outline-danger rounded" @onclick="NavigateToDeleteEvent">Delete</button>
                                    </div>
                                    <div class="col-12 mt-2">
                                        <button class="btn btn-outline-primary rounded" @onclick="NavigateToCreateEvent">Create Event</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="container mb-3">
            <p>No current events available.</p>
            <button class="btn btn-outline-primary rounded" @onclick="NavigateToCreateEvent">Create Event</button>
        </div>
    }
</div>

@code {
    private List<EventModel>? events;

    [Inject] private NavigationManager? NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            events = (await _db.GetAllEvents()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading events: {ex.Message}");
        }
    }
    private void NavigateToEditEvent()
    {
        NavigationManager!.NavigateTo("/Events/Edit/{eventName}");
    }
    private void NavigateToCreateEvent()
    {
        NavigationManager!.NavigateTo("/Events/Create");
    }
    private void NavigateToDeleteEvent()
    {
        NavigationManager!.NavigateTo("/Events/Delete/{eventName}");
    }
}

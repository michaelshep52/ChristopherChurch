@page "/Events/Create"
@inject IEventsData _db

<div class="eventpage">
    @if (showSuccess)
    {
        <div class="alert alert-success" role="alert">
            <h4>Event successfully created!</h4>
            <button class="btn btn-outline-primary rounded" @onclick="NavigateToEvents">Events</button>
            <button class="btn btn-outline-secondary rounded" @onclick="NavigateToHome">Back</button>
        </div>
    }
    else
    {
        <h3>Create New Event</h3>

        <EditForm Model="@newEvent" OnValidSubmit="@AddEvent">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="eventName">Event Name:</label>
                <InputText id="eventName" @bind-Value="newEvent.EventName" class="form-control" placeholder="ex. Church Dinner" />
                <ValidationMessage For="@(() => newEvent.EventName)" />
            </div>

            <div class="form-group">
                <label for="description">Description:</label>
                <InputTextArea id="description" @bind-Value="newEvent.Description" class="form-control" placeholder="ex. Dinner at Church" />
                <ValidationMessage For="@(() => newEvent.Description)" />
            </div>

            <div class="form-group">
                <label for="eventDate">Event Date:</label>
                <InputDate id="eventDate" @bind-Value="newEvent.EventDate" class="form-control" />
                <ValidationMessage For="@(() => newEvent.EventDate)" />
            </div>
            <div class="container">
                <div class="row">
                    <div class="col-12 mt-3">
                        <button type="submit" class="btn btn-outline-primary">Save Event</button>
                        <button class="btn btn-outline-danger rounded" @onclick="NavigateToHome">Back</button>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {
    private DisplayEventModel newEvent = new DisplayEventModel { EventDate = DateTime.Today };
    private bool showSuccess = false;

    [Inject] private NavigationManager? NavigationManager { get; set; }

    private async Task AddEvent()
    {
        try
        {
            EventModel newEventModel = new EventModel
            {
                EventName = newEvent.EventName!,
                Description = newEvent.Description!,
                EventDate = newEvent.EventDate
            };
            showSuccess = true;

            await _db.AddEvent(newEventModel);

            // Reset the form and set showSuccess to true if the creation is successful
            newEvent = new DisplayEventModel { EventDate = DateTime.Today };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating event: {ex.Message}");
        }
    }
    private void NavigateToEvents()
    {
        NavigationManager!.NavigateTo("/Events}");
    }
    private void NavigateToHome()
    {
        NavigationManager!.NavigateTo("/");
    }

    }

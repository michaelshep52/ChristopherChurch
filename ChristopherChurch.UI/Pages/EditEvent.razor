@page "/Events/Edit/{EventName}"
@inject IEventsData _db

<div class="eventpage">
    @if (showSuccess)
    {
        <div>
            <h4>Event Edited successfully!</h4>
            <button class="btn btn-outline-primary rounded" @onclick="NavigateToEvents">Events</button>
            <button class="btn btn-outline-secondary rounded" @onclick="NavigateToHome">Back</button>
        </div>
    }
    else
    {
        @if (editEvent == null && !isLoading)
        {
            <p>Error: Event not found or null.</p>
        }
        @if (editEvent != null)
        {
            <h3>Edit Event</h3>

            <EditForm Model="@editEvent" OnValidSubmit="@UpdateEvent">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="eventName">Event Name:</label>
                    <InputText id="eventName" @bind-Value="editEvent!.EventName" class="form-control border-black" disabled />
                    <ValidationMessage For="@(() => editEvent.EventName)" />
                </div>

                <div class="form-group">
                    <label for="description">Description:</label>
                    <InputTextArea id="description" @bind-Value="editEvent.Description" class="form-control border-black" />
                    <ValidationMessage For="@(() => editEvent.Description)" />
                </div>

                <div class="form-group">
                    <label for="eventDate">Event Date:</label>
                    <InputDate id="eventDate" @bind-Value="editEvent.EventDate" class="form-control border-black" />
                    <ValidationMessage For="@(() => editEvent.EventDate)" />
                </div>
                <div class="container">
                    <div class="row">
                        <div class="col-12 mt-3">
                            <button type="submit" class="btn btn-outline-primary">Save Event</button>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
        else
        {
            <h4>Loading...</h4>
        }
    }
</div>

@code {
    private EventModel? editEvent;
    private bool showSuccess = false;
    private bool isLoading = true;


    [Inject] private NavigationManager? NavigationManager { get; set; }

    [Parameter] public string? EventName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadEvent();
    }

    private async Task LoadEvent()
    {
        try
        {
            if (EventName != null)
            {
                editEvent = await _db.GetEventByName(EventName);

                if (editEvent == null)
                {
                    Console.WriteLine($"Error: Event not found for EventName: {EventName}");
                }
            }
            else
            {
                Console.WriteLine("Error: EventName is null.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading event: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    private async Task UpdateEvent()
    {
        try
        {
            await _db.UpdateEvent(editEvent!);
            showSuccess = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating event: {ex.Message}");
        }
    }

    private void NavigateToEvents()
    {
        NavigationManager!.NavigateTo("/Events");
    }

    private void NavigateToHome()
    {
        NavigationManager!.NavigateTo("/");
    }
}
